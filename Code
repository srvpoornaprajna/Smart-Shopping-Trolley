#include <SPI.h>
#include <MFRC522.h>
#include <Keypad.h>
#include <LiquidCrystal_I2C.h>

// RFID module pins
#define SS_PIN 10
#define RST_PIN 9
MFRC522 mfrc522(SS_PIN, RST_PIN);

// Keypad pins and definitions
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};
byte rowPins[ROWS] = {7, 6, 5, 4}; // connect to the row pinouts of the keypad
byte colPins[COLS] = {3, 2, A1, A0}; // connect to the column pinouts of the keypad
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

const int LCD_COLUMNS = 16;
const int LCD_ROWS = 2;
LiquidCrystal_I2C lcd(0x27, LCD_COLUMNS, LCD_ROWS);

struct Item {
  String uid;
  String name;
  float price;
  int quantity;
};

// Array to store item details
Item items[] = {
  {"FA8DA6EE", "Apple 500gm", 100, 0},
  {"6AB49AEE", "Banana 1kg", 50, 0},
  {"8A1F8EEE", "Milk 500ml", 26, 0},
  {"BAB39AEE", "Curd 250ml", 15, 0},
  {"3A260BB0", "Rice 10kg", 290, 0},
};
const int numItems = sizeof(items) / sizeof(Item);

// Variables
String phoneNumber = "";
bool billingInProgress = false;
bool paymentInProgress = false;
bool totalDisplayed = false;
float totalBill = 0.0;
unsigned long lastKeyPressTime = 0;
const unsigned long debounceDelay = 200; // 200 milliseconds debounce delay
const unsigned long scanDelay = 2000; // 2 seconds delay to avoid double counting
unsigned long lastScanTime = 0;
int lastScannedItemIndex = -1; // To keep track of the last scanned item

// Buzzer pin
const int buzzerPin = 8;

void setup() {
  Serial.begin(9600);
  SPI.begin();
  mfrc522.PCD_Init();
  lcd.begin(LCD_COLUMNS, LCD_ROWS);
  lcd.backlight();
  lcd.clear();
  lcd.print("Welcome to");
  lcd.setCursor(0, 1);
  lcd.print("Smart Shopping");
  delay(3000); // Display welcome message for 3 seconds
  lcd.clear();
  lcd.print("Enter Phone #");

  // Initialize the buzzer pin
  pinMode(buzzerPin, OUTPUT);
  digitalWrite(buzzerPin, LOW);
}

void loop() {
  char key = keypad.getKey();
  
  if (key != NO_KEY && (millis() - lastKeyPressTime > debounceDelay)) {
    handleKeypadInput(key);
    lastKeyPressTime = millis();
  }
  
  if (billingInProgress) {
    scanRFID();
  }
}

void handleKeypadInput(char key) {
  if (paymentInProgress || totalDisplayed) {
    if (key == '1') {
      proceedToPay();
    } else if (key == '2') {
      continueShopping();
    }
    return;
  }
  
  switch(key) {
    case '#':
      if (phoneNumber.length() > 0) {
        startBilling();
      }
      break;
    case '*':
      removeItem();
      break;
    case 'A':
      addItem();
      break;
    case 'B':
      showTotalOptions();
      break;
    case 'D':
      resetTrolley();
      break;
    default:
      if (phoneNumber.length() < 10 && isDigit(key)) {
        phoneNumber += key;
        lcd.setCursor(phoneNumber.length() - 1, 1);
        lcd.print(key);
      }
  }
}

void startBilling() {
  billingInProgress = true;
  lcd.clear();
  lcd.print("Scanning...");
}

void scanRFID() {
  if (millis() - lastScanTime < scanDelay) {
    return;
  }

  if (mfrc522.PICC_IsNewCardPresent() && mfrc522.PICC_ReadCardSerial()) {
    String uidString = "";
    for (byte i = 0; i < mfrc522.uid.size; i++) {
      uidString += String(mfrc522.uid.uidByte[i] < 0x10 ? "0" : "");
      uidString += String(mfrc522.uid.uidByte[i], HEX);
    }
    uidString.toUpperCase();
    
    bool itemFound = false;
    for (int i = 0; i < numItems; i++) {
      if (items[i].uid == uidString) {
        items[i].quantity++;
        totalBill += items[i].price;
        lastScannedItemIndex = i; // Update the last scanned item index
        
        // Beep to indicate successful scan
        digitalWrite(buzzerPin, HIGH);
        delay(100);
        digitalWrite(buzzerPin, LOW);
        
        lcd.clear();
        lcd.print(items[i].name);
        lcd.setCursor(0, 1);
        lcd.print("Qty: ");
        lcd.print(items[i].quantity);
        lcd.print(" Rs");
        lcd.print(items[i].price); // Display individual item price
        itemFound = true;
        break;
      }
    }
    
    if (!itemFound) {
      lcd.clear();
      lcd.print("Unknown Item");
    }
    
    mfrc522.PICC_HaltA();
    mfrc522.PCD_StopCrypto1();
    
    lastScanTime = millis(); // Update the last scan time
    delay(scanDelay); // Delay to avoid double counting
    lcd.clear();
    lcd.print("Scanning...");
  }
}

void removeItem() {
  if (lastScannedItemIndex >= 0 && items[lastScannedItemIndex].quantity > 0) {
    items[lastScannedItemIndex].quantity--;
    totalBill -= items[lastScannedItemIndex].price;
    
    lcd.clear();
    lcd.print(items[lastScannedItemIndex].name);
    lcd.setCursor(0, 1);
    lcd.print("Qty: ");
    lcd.print(items[lastScannedItemIndex].quantity);
    lcd.print(" Rs");
    lcd.print(items[lastScannedItemIndex].price); // Display individual item price
    
    delay(2000); // Display item removal confirmation for 2 seconds
    lcd.clear();
    lcd.print("REMOVED");
    delay(2000);
    lcd.clear();
    lcd.print("Scanning...");
  } else {
    lcd.clear();
    lcd.print("Cannot remove");
    lcd.setCursor(0, 1);
    lcd.print("item");
    delay(2000); // Display error message for 2 seconds
    lcd.clear();
    lcd.print("Scanning...");
  }
}

void addItem() {
  if (lastScannedItemIndex >= 0) {
    items[lastScannedItemIndex].quantity++;
    totalBill += items[lastScannedItemIndex].price;
    
    lcd.clear();
    lcd.print(items[lastScannedItemIndex].name);
    lcd.setCursor(0, 1);
    lcd.print("Qty: ");
    lcd.print(items[lastScannedItemIndex].quantity);
    lcd.print(" Rs");
    lcd.print(items[lastScannedItemIndex].price); // Display individual item price
    
    delay(2000); // Display item addition confirmation for 2 seconds
    lcd.clear();
    lcd.print("ADDED");
    delay(2000);
    lcd.clear();
    lcd.print("Scanning...");
  }
}

void showTotalOptions() {
  lcd.clear();
  lcd.print("Total: Rs");
  lcd.print(totalBill);
  lcd.setCursor(0, 1);
  lcd.print("1: Pay 2: Shop");
  totalDisplayed = true;
}

void proceedToPay() {
  paymentInProgress = true;
  lcd.clear();
  lcd.print("Processing...");
  delay(10000); // Simulate processing time
  lcd.clear();
  lcd.print("Payment Done");
  delay(2000);
  lcd.clear();
  lcd.print("Thank you for ");
  lcd.setCursor(0, 1);
  lcd.print(" shopping");
  delay(5000);
  resetTrolley();
}

void continueShopping() {
  totalDisplayed = false;
  lcd.clear();
  lcd.print("Scanning...");
}

void resetTrolley() {
  phoneNumber = "";
  totalBill = 0.0;
  billingInProgress = false;
  paymentInProgress = false;
  totalDisplayed = false;
  lastScannedItemIndex = -1; // Reset last scanned item index
  for (int i = 0; i < numItems; i++) {
    items[i].quantity = 0;
  }
  lcd.clear();
  lcd.print("Welcome to");
  lcd.setCursor(0, 1);
  lcd.print("Smart Shopping");
  delay(3000); // Display welcome message for 3 seconds
  lcd.clear();
  lcd.print("Enter Phone #");
}
